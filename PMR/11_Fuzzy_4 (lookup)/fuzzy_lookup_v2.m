% close all
clear

%% mackey-glass
% parametry mackey-glass
alpha = 0.1;
beta = 0.2;
n = 9.65;
tau = 30;
% parametry vstupních dat
seed = 42;          % seed pro vygenerování náhodných dat pro incializaci mackey_glass
N = 340;            % délka vstupních dat

% výpoèet vstupních dat mackey_glass rovnicí
x = mackey_glass(N, alpha, beta, tau, n, seed);

% odstranìní inicializaèních dat
x = x(tau+1:end);
N = N - tau;

%% vykreslení vstupních dat
if ishandle(1)
    delete(get(1,'Children'))
end
figure(1)
    plot(x,'LineWidth',1.5)
    xlabel('k')
    ylabel('x')
    title('Trénovací èasová øada (Mackey-Glass)')
    grid on
    axis tight
    
%% fuzzy-lookup tabulka
% nastavitelné parametry fuzzy-lookup
n_mfs = 20;                   % poèet funkcí pøíslušnosti (mf) na vstupním prostoru (x)
delay_idxs = [tau 3 2 1];           % indexy krokù do minulosti ze kterých se bude predikovat

% odvozené parametry fuzzy-lookup
min_delay = min(delay_idxs);  % nejnižší krok do minulosti ze zvolených krokù
max_delay = max(delay_idxs);  % nejvyšší krok do minulosti ze zvolených krokù
n_ifs = length(delay_idxs);   % poèet podmínek v pravidlu (1. je vždy i-tau. tý prvek)
n_train = N-n_ifs-tau+1;      % poèet trénovacích dat

% pøíprava vstupních/výstupních dat
Xs = zeros(n_train,n_ifs);   % vstupní data
Ys = zeros(n_train,1);       % výstupní data
for i = 1:n_train
    Xs(i,:) = x(max_delay-delay_idxs + i)';
    Ys(i) = x(max_delay + i);
end

%% vygenerování vstupních gaussovských funkcí pøíslušnosti
gmfs = cell(n_mfs,1);
centers = linspace(min(x),max(x),n_mfs);
dcenters = mean(diff(centers));
parfor i = 1:n_mfs
    sig = gauss_sigma(centers(i) + dcenters/2,0.5,centers(i));
    gmfs{i} = @(xin) gaussmf(xin,[sig centers(i)]);  % gaussovky pravidel jako funkce 
end

% všechny možné n_ifs-permutace (variace) z gmfs (s opakováním)
gmfs_perm = permn(gmfs,n_ifs);  % rozmery: (n_perm,n_ifs)
n_perm = size(gmfs_perm,1);     % poèet všech k-permutací z n == (n_mfs^n_ifs)

%% vykreslení gaussovských vstpních funkcí pøíslušnosti
xspan = linspace(min(x),max(x),1000);

if ishandle(2)
    delete(get(2,'Children'))
end
figure(2)
    hold on
    cellfun(@(gmf) plot(xspan, gmf(xspan)), gmfs)
    title('funkce pøíslušnosti vstupního prostoru (x)')
    xlabel('x')
    ylabel('\mu(x)')
    grid on
    axis tight
    hold off
    
%% výpoèet všech možných kombinací vstupních gaussovek pro daný výstup
rules.mu_prod = cell(n_train,n_perm);
rules.y = cell(n_train,1);
% pro jednotlivé výstupy
for idx_out = 1:n_train  % pro jednotlivá trénovací data (Xs(i,:),Ys(i))
    X = num2cell(Xs(idx_out,:));       % jeden øádek trénovacích dat
    for idx_perm = 1:n_perm  % pro jednotlivé permutace if èástí pravidel
        perm = {gmfs_perm{idx_perm,:}};     % jedna permutace if èásti (mf funkcí)
        % výpoèet pravidel pro všechny vstupy, pro všechny permutace if èástí
        rules.mu_prod{idx_out,idx_perm} = prod(cellfun(@(perm,X) perm(X), perm,X));
        rules.y{idx_out} = Ys(idx_out);
    end
    % nalezení nejlepší (nejvyšší pøíslušnost) permutace if èástí pro každý výstup
    [rules.best.val{idx_out}, rules.best.idx{idx_out}] = max([rules.mu_prod{idx_out,:}]);
end

% nalezení unikátních hodnot
[unique_idxs, unique_vals, unique_ys] = best_unique(rules.best.idx, rules.best.val, rules.y);
rules.best.mfs = arrayfun(@(idx) {gmfs_perm{idx,:}}, unique_idxs, 'UniformOutput', false);  % nejlepší unikátní pravidla
rules.best.ys = unique_ys;  % výstupy nejlepších unikátních pravidel
% mu_prod = cell2mat(rules.mu_prod); % TODO: najdi maximum v každém øádku (odpovídá nejlepší kombinaci MF pro predikci)


%% testování predikce s nalezenými pravidly
% generování testovacích dat
% inicializace vstupních dat
N_test = 530;
alpha_test = alpha;
beta_test = beta;
tau_test = tau;
n_test = n;

% vygenerování testovacích hodnot
x_test = mackey_glass(N_test, alpha_test, beta_test, tau_test, n_test, seed);

x_test = x_test(tau+1:end);
N_test = N_test - tau;

%% jednokroková predikce fuzzy systémem
fx = fuzzy_inference_v2(x_test, rules.best.mfs, rules.best.ys, delay_idxs);

% výpoèet chyby
err = abs(fx' - x_test(max_delay:end));
s = sumsqr(fx' - x_test(max_delay:end));

% vykreslení testovacích výsledkù
if ishandle(3)
   delete(get(3,'Children')) 
end
figure(3)
    set(3,'DefaultlineLineWidth',1.5)
    plot(x_test)
    hold on
    plot(max_delay:N_test+1,fx)
    plot(max_delay:N_test+1,err)
    title(strcat('Jednokroková predikce testovací èasové øady (sumsqr= ',num2str(s),')'));
    legend('Mackey-Glass','Mackey-Glass (pred.)','abs. error')
    xlabel('k')
    ylabel('x')
    grid on
    axis tight
    hold off

%% uložení grafu
folder = './figs/';
name = sprintf('nmfs%u_delays%s.pdf',n_mfs,join(string(delay_idxs),'-'));
export_fig(3,strcat(folder,name));
